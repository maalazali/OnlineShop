-- Create Table

CREATE TABLE KundeX(
    email VARCHAR(255) PRIMARY KEY,
    username VARCHAR(255) UNIQUE,
    passwort VARCHAR(255) NOT NULL
);

CREATE TABLE KategorieX(
    Kategorie_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Kategorie_Typ VARCHAR(255),
    Kategorie_Name VARCHAR(255)
);

CREATE TABLE ProduktX(
    Seriennummer SMALLINT PRIMARY KEY ,
    Produkt_Name VARCHAR(255),
    Preis_Produkt FLOAT,
    CHECK ( Preis_Produkt > 0 ),
    FOREIGN KEY (Kategorie_ID) REFERENCES KategorieX(Kategorie_ID) ON DELETE CASCADE
);

CREATE TABLE BestellungX(
    Bestellungnnummer INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255),
    Gesamtpreis FLOAT,
    Lieferadresse VARCHAR(255),
    Zahlungsmehtode VARCHAR(255),
    FOREIGN KEY (email) REFERENCES Kunde(email) ON DELETE CASCADE,
    FOREIGN KEY (cardID) REFERENCES CartX(cardID) ON DELETE CASCADE
);


--auto increment Bestellungsnnummer on INSERT INTO BestellungX
CREATE SEQUENCE BestellungnnummerSeqX
START WITH 1
Increment By 1
minvalue 1
nomaxvalue
NOCYCLE;


CREATE OR replace TRIGGER BestellungBeforeInsertX
    BEFORE INSERT ON BestellungX
    FOR EACH ROW
    BEGIN
        Select BestellungnnummerSeqX.nextval INTO :new.Bestellungnnummer FROM dual;
    end;


CREATE TABLE waehlenX(
    email VARCHAR(255) PRIMARY KEY,
    Kategorie_ID INTEGER PRIMARY KEY,
    FOREIGN KEY (email) REFERENCES KundeX(email) ON DELETE CASCADE,
    FOREIGN KEY (Kategorie_ID) REFERENCES KategorieX(Kategorie_ID) ON DELETE SET NULL
);

CREATE TABLE empfehlenX(
    EmpfehlerProdukt SMALLINT,
    EmpfohleneProdukt SMALLINT,
    FOREIGN KEY (EmpfehlerProdukt) REFERENCES ProduktX(Seriennummer),
    FOREIGN KEY (EmpfohleneProdukt) REFERENCES ProduktX(Seriennummer)
);

CREATE TABLE CartX(
    cardID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    Email VARCHAR(255),
    Seriennummer SMALLINT NOT NULL,
    Produkt_Name VARCHAR(255),
    amount SMALLINT,
    Preis_Produkt FLOAT
    CHECK ( Preis_Produkt > 0 ),
FOREIGN KEY (email) REFERENCES KundeX(email),
FOREIGN KEY (Seriennummer) REFERENCES ProduktX(Seriennummer)
);

--Prozedur für Kunde löschen
CREATE OR REPLACE PROCEDURE p_delete_person(
   p_email IN KundeX.email%TYPE,
   p_error_code OUT NUMBER
)
AS
  BEGIN
    DELETE
    FROM KundeX
    WHERE p_email = KundeX.email;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
    EXCEPTION
    WHEN OTHERS
    THEN
      p_error_code := SQLCODE;
  END p_delete_person;
/


-- Beim Eingeben der Email Adresse, muss das @ Zeichen eingefügt sein- Trigger

CREATE OR REPLACE TRIGGER Check_Email_Before_Insert
BEFORE INSERT ON KundeX
FOR EACH ROW
BEGIN
    IF NOT INSTR(:NEW.email, '@') > 0 THEN                                                      --INSTR-Funktion sucht nach dem @-Zeichen, wenn nicht gefunden gibt INSTR 0 und somit einen Fehler zurück
        RAISE_APPLICATION_ERROR(-20001, 'Die E-Mail-Adresse muss ein @-Zeichen enthalten.');    --RAISE_APPLICATION_ERROR zeigt Fehlermeldung an
    END IF;
END;
/


--Gesamtbetrag in Warenkorb berechnen

CREATE OR REPLACE PROCEDURE GetTotalCartPrice(p_total OUT NUMBER) IS
BEGIN
    SELECT SUM(p.Preis_Produkt) INTO p_total
    FROM CartX c
    INNER JOIN ProduktX p ON c.Seriennummer = p.Seriennummer;
END;
/


















